{"version":3,"sources":["serviceWorker.js","SelectList.js","OrarioSyncApp.js","index.js"],"names":["Boolean","window","location","hostname","match","SelectList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateSelected","bind","assertThisInitialized","newIndex","onSelect","selected","react_default","a","createElement","dist_default","multiple","items","onChange","List","beReqUrl","durations","[LMCU]","[L]","[LM]","","yearLabels","mainTitle","Fragment","schoolHeader","courseHeader","yearHeader","curriculumHeader","buttonContent","courseTypeRE","RegExp","OrarioSyncApp","state","schools","schoolNumber","courses","courseNumber","courseType","years","year","curricula","curriculumNumber","_this2","fetch","then","response","json","data","setState","prevProps","prevState","_this3","toConsumableArray","Array","keys","forEach","i","push","_this4","length","schoolNames","item","name","courseNames","curriculumNames","src_SelectList","exec","type","onClick","e","open","React","Component","osa","src_OrarioSyncApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3172dc56.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import List from \"react-list-select\";\r\nimport React from \"react\";\r\n\r\nclass SelectList extends List {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateSelected = this.updateSelected.bind(this);\r\n    }\r\n\r\n    updateSelected(newIndex) {\r\n        this.props.onSelect(newIndex);\r\n    }\r\n\r\n    render() {\r\n        const {selected} = this.props;\r\n        if(selected >= 0) return <List\r\n            multiple={false}\r\n            items={this.props.items}\r\n            onChange={this.updateSelected}\r\n            selected={[selected]}\r\n        />;\r\n        else return <List\r\n            multiple={false}\r\n            items={this.props.items}\r\n            onChange={this.updateSelected}\r\n        />;\r\n\r\n    }\r\n}\r\n\r\nexport default SelectList;","//TODO: background color based on school\r\n//TODO: autoscroll\r\n//TODO: choice of courses to include\r\n\r\nimport React from \"react\";\r\nimport SelectList from \"./SelectList\";\r\n\r\nconst beReqUrl = \"https://orario-syncunibo-tvwqqxhvxt.now.sh/\";\r\nconst beGetSchools = \"/getschools\";\r\nconst beGetCourses = \"/getcourses/\";\r\nconst beGetCurricula = \"/getcurricula/\";\r\nconst beGetCalendar = \"/getical/\";\r\n\r\nconst durations = {\"[LMCU]\": 6, \"[L]\": 3, \"[LM]\": 2, \"\": 0};\r\nconst yearLabels = [\"Primo\", \"Secondo\", \"Terzo\", \"Quarto\", \"Quinto\", \"Sesto\"];\r\n\r\nconst mainTitle = <>OrarioSync</>;\r\nconst schoolHeader = <>Seleziona la tua Scuola</>;\r\nconst courseHeader = <>Seleziona il tuo corso di studi</>;\r\nconst yearHeader = <>Seleziona l'anno a cui sei iscritto</>;\r\nconst curriculumHeader = <>Seleziona il tuo curriculum</>;\r\nconst buttonContent = <>Scarica orario in iCal</>;\r\n\r\nconst courseTypeRE = new RegExp(\"\\\\[(.*?)]\");\r\n\r\nclass OrarioSyncApp extends React.Component {\r\n    state = {\r\n        schools: [],\r\n        schoolNumber: -1,\r\n        courses: [],\r\n        courseNumber: -1,\r\n        courseType: \"\",\r\n        years: [],\r\n        year: -1,\r\n        curricula: [],\r\n        curriculumNumber: -1,\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(beReqUrl + beGetSchools)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({schools: data});\r\n            });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        const schoolNumber = this.state.schoolNumber;\r\n        const courseNumber = this.state.courseNumber;\r\n        const courseType = this.state.courseType;\r\n        const year = this.state.year;\r\n        if (prevState.schoolNumber !== schoolNumber) {\r\n            fetch(beReqUrl + beGetCourses + schoolNumber)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({courses: data}));\r\n            this.setState({\r\n                courseNumber: -1,\r\n                courseType: \"\",\r\n                year: -1,\r\n                curricula: [],\r\n                curriculumNumber: -1\r\n            });\r\n\r\n        }\r\n        if (prevState.courseType !== courseType) {\r\n            let items = [];\r\n            let yearNumbers = [...Array(durations[this.state.courseType]).keys()];\r\n            yearNumbers.forEach(i => items.push(yearLabels[i]));\r\n            this.setState({years: items});\r\n        }\r\n        if ((prevState.courseNumber !== courseNumber && year > 0) || prevState.year !== year) {\r\n            fetch(beReqUrl + beGetCurricula + schoolNumber + \"/\" + courseNumber + \"/\" + year)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({curricula: data}));\r\n            this.setState({\r\n                curricula: [],\r\n                curriculumNumber: -1\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const {schools} = this.state;\r\n        const {schoolNumber} = this.state;\r\n        const {courses} = this.state;\r\n        const {courseType} = this.state;\r\n        const {courseNumber} = this.state;\r\n        const {year} = this.state;\r\n        const {curricula} = this.state;\r\n        const {curriculumNumber} = this.state;\r\n\r\n        if (!schools.length) return <span>Getting schools...</span>;\r\n        let schoolNames = [];\r\n        schools.forEach(item => schoolNames.push(item.name));\r\n\r\n        if (!courses.length && schoolNumber >= 0) return <span>Getting courses...</span>;\r\n        let courseNames = [];\r\n        courses.forEach(item => courseNames.push(item.name));\r\n\r\n        if (!curricula.length && year >= 0) return <span>Getting curricula...</span>;\r\n        let curriculumNames = [];\r\n        curricula.forEach(item => curriculumNames.push(item.name));\r\n\r\n        return (\r\n            <>\r\n                <h1>{mainTitle}</h1>\r\n                <h2>{schoolHeader}</h2>\r\n                <SelectList\r\n                    items={schoolNames}\r\n                    onSelect={selected =>\r\n                        this.setState({schoolNumber: selected})\r\n                    }\r\n                    selected={schoolNumber}\r\n                />\r\n                {courses.length &&\r\n                <>\r\n                    <h2>{courseHeader}</h2>\r\n                    <SelectList\r\n                        items={courseNames}\r\n                        onSelect={selected => {\r\n                            this.setState({courseNumber: selected});\r\n                            this.setState({courseType: courseTypeRE.exec(courseNames[selected])[0]});\r\n                        }}\r\n                        selected={courseNumber}\r\n                    />\r\n                </>}\r\n                {courseType.length &&\r\n                <>\r\n                    <h2>{yearHeader}</h2>\r\n                    <SelectList\r\n                        items={this.state.years}\r\n                        onSelect={selected =>\r\n                            this.setState({year: selected + 1})\r\n                        }\r\n                        selected={year - 1}\r\n                    />\r\n\r\n                </>}\r\n                {year >= 0 &&\r\n                <>\r\n                    <h2>{curriculumHeader}</h2>\r\n                    <SelectList\r\n                        items={curriculumNames}\r\n                        onSelect={selected =>\r\n                            this.setState({curriculumNumber: selected})\r\n                        }\r\n                        selected={curriculumNumber}\r\n                    />\r\n                </>}\r\n                {curriculumNumber >= 0 &&\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={e => window.open(beReqUrl + beGetCalendar + schoolNumber + \"/\" + courseNumber + \"/\" + year + \"/\" + curriculumNumber)}>\r\n                        {buttonContent}\r\n                    </button>\r\n                </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OrarioSyncApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from \"./serviceWorker\";\nimport OrarioSyncApp from \"./OrarioSyncApp\"\n\nlet osa = <OrarioSyncApp/>;\n\nReactDOM.render(osa, document.getElementById(\"container\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}