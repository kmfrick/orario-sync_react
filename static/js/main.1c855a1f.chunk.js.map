{"version":3,"sources":["serviceWorker.js","SelectList.js","OrarioSyncApp.js","index.js"],"names":["Boolean","window","location","hostname","match","SelectList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateSelected","bind","assertThisInitialized","newIndex","onSelect","multiple","react_default","a","createElement","dist_default","items","onChange","selected","List","beReqUrl","durations","[LMCU]","[L]","[LM]","","yearLabels","mainTitle","Fragment","schoolHeader","courseHeader","yearHeader","curriculumHeader","classesHeader","buttonContent","courseTypeRE","RegExp","OrarioSyncApp","state","schools","schoolIndex","courses","courseIndex","courseType","years","year","curricula","curriculumIndex","classes","selectedClasses","classesBtm","_this2","fetch","then","response","json","data","setState","prevProps","prevState","_this3","toConsumableArray","Array","keys","forEach","i","push","counts","length","num","newClasses","item","newBtm","_this4","schoolNames","name","courseNames","curriculumNames","classNames","src_SelectList","exec","type","onClick","e","open","React","Component","osa","src_OrarioSyncApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c855a1f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import List from \"react-list-select\";\r\nimport React from \"react\";\r\n\r\nclass SelectList extends List {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateSelected = this.updateSelected.bind(this);\r\n    }\r\n\r\n    updateSelected(newIndex) {\r\n        this.props.onSelect(newIndex);\r\n    }\r\n\r\n    render() {\r\n        if (this.props.multiple) {\r\n            return <List\r\n                multiple={true}\r\n                items={this.props.items}\r\n                onChange={this.updateSelected}\r\n                selected={this.props.selected}\r\n                />\r\n        } else {\r\n            return <List\r\n                multiple={false}\r\n                items={this.props.items}\r\n                onChange={this.updateSelected}\r\n                selected={[this.props.selected]}\r\n            />;\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default SelectList;","//TODO: background color based on school\r\n//TODO: autoscroll\r\n//TODO: choice of courses to include\r\n\r\nimport React from \"react\";\r\nimport SelectList from \"./SelectList\";\r\n\r\nconst beReqUrl = \"https://orario-syncunibo-aoajqpirse.now.sh\";\r\nconst beParamSchool = \"?school=\";\r\nconst beParamCourse = \"&course=\";\r\nconst beParamYear = \"&year=\";\r\nconst beParamCurr = \"&curr=\";\r\nconst beParamClsBtm = \"&classes=\";\r\nconst beGetSchools = \"/getschools\";\r\nconst beGetCourses = \"/getcourses\";\r\nconst beGetCurricula = \"/getcurricula\";\r\nconst beGetClasses = \"/getclasses\";\r\nconst beGetCalendar = \"/getical\";\r\n\r\nconst durations = {\"[LMCU]\": 6, \"[L]\": 3, \"[LM]\": 2, \"\": 0};\r\nconst yearLabels = [\"Primo\", \"Secondo\", \"Terzo\", \"Quarto\", \"Quinto\", \"Sesto\"];\r\n\r\nconst mainTitle = <>OrarioSync</>;\r\nconst schoolHeader = <>Seleziona la tua Scuola</>;\r\nconst courseHeader = <>Seleziona il tuo corso di studi</>;\r\nconst yearHeader = <>Seleziona l'anno a cui sei iscritto</>;\r\nconst curriculumHeader = <>Seleziona il tuo curriculum</>;\r\nconst classesHeader = <>Seleziona i corsi che segui</>;\r\nconst buttonContent = <>Scarica orario in iCal</>;\r\n\r\n\r\nconst courseTypeRE = new RegExp(\"\\\\[(.*?)]\");\r\n\r\nclass OrarioSyncApp extends React.Component {\r\n    state = {\r\n        schools: [],\r\n        schoolIndex: -1,\r\n        courses: [],\r\n        courseIndex: -1,\r\n        courseType: \"\",\r\n        years: [],\r\n        year: -1,\r\n        curricula: [],\r\n        curriculumIndex: -1,\r\n        classes: [],\r\n        selectedClasses: [],\r\n        classesBtm: 0\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(beReqUrl + beGetSchools)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({schools: data});\r\n            });\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        const schoolIndex = this.state.schoolIndex;\r\n        const courseIndex = this.state.courseIndex;\r\n        const courseType = this.state.courseType;\r\n        const curriculumIndex = this.state.curriculumIndex;\r\n        const classes = this.state.classes;\r\n        const classesBtm = this.state.classesBtm;\r\n        const selectedClasses = this.state.selectedClasses;\r\n        const year = this.state.year;\r\n        if (prevState.schoolIndex !== schoolIndex) {\r\n            fetch(beReqUrl + beGetCourses + beParamSchool + schoolIndex)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({courses: data}));\r\n            this.setState({\r\n                courseIndex: -1,\r\n                courseType: \"\",\r\n                year: -1,\r\n                curricula: [],\r\n                curriculumIndex: -1\r\n            });\r\n\r\n        }\r\n        if (prevState.courseType !== courseType) {\r\n            let items = [];\r\n            let yearNumbers = [...Array(durations[this.state.courseType]).keys()];\r\n            yearNumbers.forEach(i => items.push(yearLabels[i]));\r\n            this.setState({years: items});\r\n        }\r\n        if ((prevState.courseIndex !== courseIndex && year > 0) || prevState.year !== year) {\r\n            fetch(beReqUrl + beGetCurricula + beParamSchool + schoolIndex + beParamCourse + courseIndex + beParamYear + year)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({curricula: data}));\r\n            this.setState({\r\n                curricula: [],\r\n                curriculumIndex: -1\r\n            });\r\n        }\r\n        if (prevState.curriculumIndex !== curriculumIndex) {\r\n            fetch(beReqUrl + beGetClasses + beParamSchool + schoolIndex + beParamCourse + courseIndex + beParamYear + year + beParamCurr + curriculumIndex)\r\n                .then(response => response.json())\r\n                .then(data => this.setState({classes: data}));\r\n            this.setState({\r\n                classes: [],\r\n                selectedClasses: [],\r\n                classesBtm: 0\r\n            });\r\n        }\r\n        if (prevState.selectedClasses !== selectedClasses) {\r\n            let counts = {};\r\n\r\n            for (let i = 0; i < selectedClasses.length; i++) {\r\n                let num = selectedClasses[i];\r\n                counts[num] = counts[num] ? counts[num] + 1 : 1;\r\n            }\r\n            let newClasses = [];\r\n            selectedClasses.forEach(item => {\r\n                if ((counts[item] % 2) !== 0) newClasses.push(item);\r\n            });\r\n            let newBtm = 0;\r\n            newClasses.forEach(item => newBtm = newBtm ^ (1 << item));\r\n            this.setState({classesBtm: newBtm});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {schools} = this.state;\r\n        const {schoolIndex} = this.state;\r\n        const {courses} = this.state;\r\n        const {courseType} = this.state;\r\n        const {courseIndex} = this.state;\r\n        const {year} = this.state;\r\n        const {curricula} = this.state;\r\n        const {curriculumIndex} = this.state;\r\n        const {classes} = this.state;\r\n        const {selectedClasses} = this.state;\r\n        const {classesBtm} = this.state;\r\n\r\n        if (!schools.length) return <span>Getting schools...</span>;\r\n        let schoolNames = [];\r\n        schools.forEach(item => schoolNames.push(item.name));\r\n\r\n        if (!courses.length && schoolIndex >= 0) return <span>Getting courses...</span>;\r\n        let courseNames = [];\r\n        courses.forEach(item => courseNames.push(item.name));\r\n\r\n        if (!curricula.length && year >= 0) return <span>Getting curricula...</span>;\r\n        let curriculumNames = [];\r\n        curricula.forEach(item => curriculumNames.push(item.name));\r\n\r\n        if (!classes.length && curriculumIndex >= 0) return <span>Getting classes...</span>\r\n        let classNames = [];\r\n        classes.forEach(item => classNames.push(item.name));\r\n\r\n\r\n        return (\r\n            <>\r\n                <h1>{mainTitle}</h1>\r\n                <h2>{schoolHeader}</h2>\r\n                <SelectList\r\n                    items={schoolNames}\r\n                    onSelect={selected =>\r\n                        this.setState({schoolIndex: selected})\r\n                    }\r\n                    selected={schoolIndex}\r\n                    multiple={false}\r\n                />\r\n                {courses.length &&\r\n                <>\r\n                    <h2>{courseHeader}</h2>\r\n                    <SelectList\r\n                        items={courseNames}\r\n                        onSelect={selected => {\r\n                            this.setState({courseIndex: selected});\r\n                            this.setState({courseType: courseTypeRE.exec(courseNames[selected])[0]});\r\n                        }}\r\n                        selected={courseIndex}\r\n                        multiple={false}\r\n                    />\r\n                </>}\r\n                {courseType.length &&\r\n                <>\r\n                    <h2>{yearHeader}</h2>\r\n                    <SelectList\r\n                        items={this.state.years}\r\n                        onSelect={selected =>\r\n                            this.setState({year: selected + 1})\r\n                        }\r\n                        selected={year - 1}\r\n                        multiple={false}\r\n                    />\r\n\r\n                </>}\r\n                {year >= 0 &&\r\n                <>\r\n                    <h2>{curriculumHeader}</h2>\r\n                    <SelectList\r\n                        items={curriculumNames}\r\n                        onSelect={selected =>\r\n                            this.setState({curriculumIndex: selected})\r\n                        }\r\n                        selected={curriculumIndex}\r\n                        multiple={false}\r\n                    />\r\n                </>}\r\n                {curriculumIndex >= 0 &&\r\n                <>\r\n                    <h2>{classesHeader}</h2>\r\n                    <SelectList\r\n                        items={classes}\r\n                        multiple={true}\r\n                        onSelect={selected => {\r\n                            this.setState({selectedClasses: selected});\r\n                        }}\r\n                        selected={selectedClasses}\r\n                    />\r\n                </>\r\n                }\r\n                {classesBtm > 0 &&\r\n                <div>\r\n                    <button\r\n                        type=\"button\"\r\n                        onClick={e => window.open(beReqUrl + beGetCalendar + beParamSchool + schoolIndex + beParamCourse + courseIndex + beParamYear + year + beParamCurr + curriculumIndex + beParamClsBtm + classesBtm)}>\r\n                        {buttonContent}\r\n                    </button>\r\n                </div>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default OrarioSyncApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from \"./serviceWorker\";\nimport OrarioSyncApp from \"./OrarioSyncApp\"\n\nlet osa = <OrarioSyncApp/>;\n\nReactDOM.render(osa, document.getElementById(\"container\"));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}